// Code generated by MockGen. DO NOT EDIT.
// Source: actors.go

// Package mock_api is a generated GoMock package.
package mock_api

import (
	domain "arch-demo/internal/domain"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockActorsService is a mock of ActorsService interface.
type MockActorsService struct {
	ctrl     *gomock.Controller
	recorder *MockActorsServiceMockRecorder
}

// MockActorsServiceMockRecorder is the mock recorder for MockActorsService.
type MockActorsServiceMockRecorder struct {
	mock *MockActorsService
}

// NewMockActorsService creates a new mock instance.
func NewMockActorsService(ctrl *gomock.Controller) *MockActorsService {
	mock := &MockActorsService{ctrl: ctrl}
	mock.recorder = &MockActorsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockActorsService) EXPECT() *MockActorsServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockActorsService) Create(actor domain.Actor) (domain.Actor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", actor)
	ret0, _ := ret[0].(domain.Actor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockActorsServiceMockRecorder) Create(actor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockActorsService)(nil).Create), actor)
}

// Delete mocks base method.
func (m *MockActorsService) Delete(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockActorsServiceMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockActorsService)(nil).Delete), id)
}

// Get mocks base method.
func (m *MockActorsService) Get(id int) (domain.Actor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", id)
	ret0, _ := ret[0].(domain.Actor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockActorsServiceMockRecorder) Get(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockActorsService)(nil).Get), id)
}

// List mocks base method.
func (m *MockActorsService) List(sortBy, orderBy, nameQuery, countryOfBirthQuery string) ([]domain.Actor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", sortBy, orderBy, nameQuery, countryOfBirthQuery)
	ret0, _ := ret[0].([]domain.Actor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockActorsServiceMockRecorder) List(sortBy, orderBy, nameQuery, countryOfBirthQuery interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockActorsService)(nil).List), sortBy, orderBy, nameQuery, countryOfBirthQuery)
}

// Update mocks base method.
func (m *MockActorsService) Update(id int, actorUpdate domain.ActorUpdate) (domain.Actor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", id, actorUpdate)
	ret0, _ := ret[0].(domain.Actor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockActorsServiceMockRecorder) Update(id, actorUpdate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockActorsService)(nil).Update), id, actorUpdate)
}
