// Code generated by MockGen. DO NOT EDIT.
// Source: movies.go

// Package mock_api is a generated GoMock package.
package mock_api

import (
	domain "arch-demo/internal/domain"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockMoviesService is a mock of MoviesService interface.
type MockMoviesService struct {
	ctrl     *gomock.Controller
	recorder *MockMoviesServiceMockRecorder
}

// MockMoviesServiceMockRecorder is the mock recorder for MockMoviesService.
type MockMoviesServiceMockRecorder struct {
	mock *MockMoviesService
}

// NewMockMoviesService creates a new mock instance.
func NewMockMoviesService(ctrl *gomock.Controller) *MockMoviesService {
	mock := &MockMoviesService{ctrl: ctrl}
	mock.recorder = &MockMoviesServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMoviesService) EXPECT() *MockMoviesServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockMoviesService) Create(actor domain.Movie) (domain.Movie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", actor)
	ret0, _ := ret[0].(domain.Movie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockMoviesServiceMockRecorder) Create(actor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockMoviesService)(nil).Create), actor)
}

// CreateActorsForMovie mocks base method.
func (m *MockMoviesService) CreateActorsForMovie(id int, actorsByMovie []int) (int, []int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateActorsForMovie", id, actorsByMovie)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].([]int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateActorsForMovie indicates an expected call of CreateActorsForMovie.
func (mr *MockMoviesServiceMockRecorder) CreateActorsForMovie(id, actorsByMovie interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateActorsForMovie", reflect.TypeOf((*MockMoviesService)(nil).CreateActorsForMovie), id, actorsByMovie)
}

// Delete mocks base method.
func (m *MockMoviesService) Delete(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockMoviesServiceMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockMoviesService)(nil).Delete), id)
}

// Get mocks base method.
func (m *MockMoviesService) Get(id int) (domain.Movie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", id)
	ret0, _ := ret[0].(domain.Movie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockMoviesServiceMockRecorder) Get(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockMoviesService)(nil).Get), id)
}

// GetActorsByMovie mocks base method.
func (m *MockMoviesService) GetActorsByMovie(id int) ([]domain.Actor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActorsByMovie", id)
	ret0, _ := ret[0].([]domain.Actor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActorsByMovie indicates an expected call of GetActorsByMovie.
func (mr *MockMoviesServiceMockRecorder) GetActorsByMovie(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActorsByMovie", reflect.TypeOf((*MockMoviesService)(nil).GetActorsByMovie), id)
}

// List mocks base method.
func (m *MockMoviesService) List(orderBy, sortBy, nameQuery, genreQuery string) []domain.Movie {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", orderBy, sortBy, nameQuery, genreQuery)
	ret0, _ := ret[0].([]domain.Movie)
	return ret0
}

// List indicates an expected call of List.
func (mr *MockMoviesServiceMockRecorder) List(orderBy, sortBy, nameQuery, genreQuery interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockMoviesService)(nil).List), orderBy, sortBy, nameQuery, genreQuery)
}

// Update mocks base method.
func (m *MockMoviesService) Update(id int, actorUpdate domain.MovieUpdate) (domain.Movie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", id, actorUpdate)
	ret0, _ := ret[0].(domain.Movie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockMoviesServiceMockRecorder) Update(id, actorUpdate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockMoviesService)(nil).Update), id, actorUpdate)
}
